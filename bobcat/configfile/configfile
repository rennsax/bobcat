#ifndef INCLUDED_BOBCAT_CONFIGFILE_
#define INCLUDED_BOBCAT_CONFIGFILE_

//    Lines are stored with initial WS removed.
//    If a line ends in \, then the next line (initial WS removed)
//    is appended to the current line.
//    Information at and beyond the first # on individual lines is removed
//    if the rmComment flag is set to true
//    Then, lines containing only blanks and tabs are not stored

#include <vector>
#include <string>
#include <cstring>
//#include <iterator>

#include <bobcat/string>
#include <bobcat/pattern>
#include "../iuo/iuo"

namespace FBB
{

class CF_Line
{
    uint16_t d_nr = 0;
    std::string d_line;

    public:
        CF_Line() = default;
        CF_Line(uint16_t lineNr, std::string const &line);

        std::string const &line() const;
        std::string key() const;
        std::string value() const;
        std::string tail() const;
        uint16_t lineNr() const;

    private:
        size_t next(size_t pos) const;                  // .f
        size_t tailPos() const;
};

#include "cfline1.f"
#include "line.f"
#include "linenr.f"
#include "next.f"
#include "cflineopinsert.f"

struct CF_Types
{
    enum Comment
    {
        KeepComment,
        NoComment,
        RemoveComment = NoComment,          // obsolete
    };
    enum Casing
    {
        UseCase,
        NoCase,
        SearchCaseSensitive = UseCase,      // obsolete
        SearchCaseInsensitive = NoCase      // obsolete
    };
    typedef Casing SearchCasing;            // obsolte

    enum Indices                            // obsolete
    {
        IgnoreIndices,
        StoreIndices
    };

    typedef std::vector<CF_Line> LineVect;
    typedef std::vector<CF_Line>::const_iterator const_iterator;

    typedef std::vector<const_iterator> ConstIterVect;

    typedef ConstIterVect::const_iterator RE_iterator;
    typedef RE_iterator const_RE_iterator;

    typedef std::pair<RE_iterator, RE_iterator> RE_iteratorPair;
};

class CF_Pimpl: public CF_Types
{
    uint16_t d_rawNumber;        
    LineVect d_line; 

    bool d_rmComment;
    bool d_caseSensitive;

    ConstIterVect d_CIvect;

    mutable Pattern d_pattern;

    public:
        explicit CF_Pimpl(Comment cType = KeepComment,           // 1
                   Casing sType = UseCase);

                                                // Name of the config file
        explicit CF_Pimpl(std::string const &fname,              // 2
                    Comment cType = KeepComment, 
                    Casing sType = UseCase);

        void setCasing(Casing type);                                    // .f
        void setComment(Comment type);                                  // .f

        void open(std::string const &fname);

        const_iterator begin() const;                                   // .f
        const_iterator end() const;                                     // .f

        const_iterator find(std::string const &target,                  // 2
                            const_iterator const &from) const;

        const_iterator findID(std::string const &id,                   // 2.cc
                              const_iterator const &from) const;

        const_iterator findKey(std::string const &key,                 // 2.cc
                              const_iterator const &from) const;

        const_iterator findRE(std::string const &re,                   // 2.cc
                              const_iterator const &from) const;

        RE_iteratorPair beginEndRE(std::string const &re);             // 2.cc
        RE_iteratorPair beginEndID(std::string const &id);             // 2.cc

        std::string const &operator[](size_t idx) const;               // 2.f

        size_t size() const;                                           // 2.f


            // used by obsoleted ConfigFile::beginEndRE()
        RE_iterator endRE() const;                                 // obs.f

    private:
        bool nextLine(std::istream &inStream, std::string &dest);
        bool rmCommentAndEscapes(std::string &line);

        const_iterator findRE(const_iterator const &from) const;       // 3.cc

        RE_iteratorPair beginEnd(
                            std::string const &re,
                            const_iterator (CF_Pimpl::*find)(
                                                std::string const &,
                                                const_iterator const &) const
                        );

        static void trimLeft(std::string &line);
        static void trimRight(std::string &line, bool appendNext);
        static bool idChar(int ch);                                    // .f
        static bool caseSensitive(std::string const &haystack,         // .f
                                  std::string const &needle);

                            // needle is guaranteed lowercase
        static bool caseInsensitive(std::string const &haystack,       // .f
                                  std::string const &needle);
};

#include "begin.f"
#include "beginendid2.f"
#include "beginendre2.f"
#include "end.f"
#include "idchar.f"
#include "opindex2.f"
#include "casesensitive.f"
#include "caseinsensitive.f"
#include "size2.f"

class ConfigFile: public CF_Types
{
    CF_Pimpl *d_ptr;

    public:
        explicit ConfigFile(Comment cType = KeepComment,            // 1
                            Casing sType = UseCase);

        explicit ConfigFile(std::string const &fname,               // 2
                            Comment cType = KeepComment, 
                            Casing sType = UseCase);

        ConfigFile(ConfigFile &&tmp);                               // 3
        ConfigFile(ConfigFile const &rhs);                          // 4

        ~ConfigFile();

        ConfigFile &operator=(ConfigFile &&tmp);                    // 1
        ConfigFile &operator=(ConfigFile const &rhs);               // 2

        std::string const &operator[](size_t idx) const;            // 1.cc
 
         void setCasing(Casing type);                                // .f
         void setComment(Comment type);                              // .f
 
        void open(std::string const &fname);

        const_iterator begin() const;                               // .cc
        const_iterator end() const;                                 // .cc

        const_iterator find(std::string const &target) const;       // 1
        const_iterator find(std::string const &target,              // 2
                            const_iterator const &from) const;

        const_iterator findID(std::string const &id) const;         // 1.f
        const_iterator findID(std::string const &id,                // 1.f
                              const_iterator from) const;

        const_iterator findKey(std::string const &key) const;       // 1.f
        const_iterator findKey(std::string const &key,              // 1.f
                               const_iterator const &from) const;

        const_iterator findRE(std::string const &re) const;         // 1.f
        const_iterator findRE(std::string const &re,                // 1.f
                                const_iterator const &from) const;

        RE_iteratorPair beginEndRE(std::string const &re) const;    // 1
        RE_iteratorPair beginEndID(std::string const &id) const;    // 1.f

        size_t size() const;                                        // 1.cc


            // deprecated members (removed in a subsequent release)
            // all filenames start with obs

        ConfigFile(Comment cType, Casing sType, Indices);       // obs..1.cc
        ConfigFile(std::string const &fname,                    // obs..2.cc
                   Comment cType, Casing sType, Indices);

        RE_iteratorPair beginEndRE() const;                     // obs...cc

        void setCommentHandling(Comment type);                  // obs.f
        void setSearchCasing(Casing type);                      // obs.f

        const_iterator obsFind(std::string const &key, size_t count) const;
        std::string findKey(std::string const &key,             // obs...cc
                            size_t count) const;
        std::string findKeyTail(std::string const &key,         // obs...cc
                            size_t count) const;

        size_t index(size_t idx) const;                         // obs..1.cc
        size_t index(const_iterator const &iterator) const;     // obs..2.cc
};

#include "beginendid1.f"
#include "findid1.f"
#include "findkey1.f"
#include "findre1.f"
#include "setcasing.f"
#include "setcomment.f"

#include "obs.f"

} // FBB        
#endif


