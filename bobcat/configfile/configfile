#ifndef INCLUDED_BOBCAT_CONFIGFILE_
#define INCLUDED_BOBCAT_CONFIGFILE_

//    Lines are stored with initial WS removed.
//    If a line ends in \, then the next line (initial WS removed)
//    is appended to the current line.
//    Information at and beyond the first # on individual lines is removed
//    if the rmComment flag is set to true
//    Then, lines containing only blanks and tabs are not stored

#include <vector>
#include <string>
#include <cstring>
//#include <iterator>

#include <bobcat/string>
#include <bobcat/pattern>
#include "../iuo/iuo"

namespace FBB
{

#include "cftypes"
#include "cfpimpl"

class ConfigFile: public CF_Types
{
    CF_Pimpl *d_ptr;

    public:
//        typedef //ConstIter const_iterator;

        explicit ConfigFile(Comment cType = KeepComment,            // 1
                            Casing sType = UseCase);

        explicit ConfigFile(std::string const &fname,               // 2
                            Comment cType = KeepComment, 
                            Casing sType = UseCase);

        ConfigFile(ConfigFile &&tmp);                               // 3
        ConfigFile(ConfigFile const &rhs);                          // 4

        ~ConfigFile();

        ConfigFile &operator=(ConfigFile &&tmp);                    // 1
        ConfigFile &operator=(ConfigFile const &rhs);               // 2

        std::string const &operator[](size_t idx) const;            // 1.cc
 
         void setCasing(Casing type);                                // .f
         void setComment(Comment type);                              // .f
 
        void open(std::string const &fname);

        const_iterator begin() const;                               // .cc
        const_iterator end() const;                                 // .cc

        const_iterator find(std::string const &target) const;       // 1
        const_iterator find(std::string const &target,              // 2
                            const_iterator const &from) const;

        const_iterator findID(std::string const &id) const;         // 1.f
        const_iterator findID(std::string const &id,                // 1.f
                              const_iterator from) const;

        const_iterator findKey(std::string const &key) const;       // 1.f
        const_iterator findKey(std::string const &key,              // 1.f
                               const_iterator const &from) const;

        const_iterator findRE(std::string const &re) const;         // 1.f
        const_iterator findRE(std::string const &re,                // 1.f
                                const_iterator const &from) const;

        RE_iteratorPair beginEndRE(std::string const &re) const;    // 1

        size_t size() const;                                        // 1.cc


            // deprecated members (removed in a subsequent release)
            // all filenames start with obs

        ConfigFile(Comment cType, Casing sType, Indices);       // obs..1.cc
        ConfigFile(std::string const &fname,                    // obs..2.cc
                   Comment cType, Casing sType, Indices);

        RE_iteratorPair beginEndRE() const;                     // obs...cc

        void setCommentHandling(Comment type);                  // obs.f
        void setSearchCasing(Casing type);                      // obs.f

        const_iterator obsFind(std::string const &key, size_t count) const;
        std::string findKey(std::string const &key,             // obs...cc
                            size_t count) const;
        std::string findKeyTail(std::string const &key,         // obs...cc
                            size_t count) const;

        size_t index(size_t idx) const;                         // obs..1.cc
        size_t index(const_iterator const &iterator) const;     // obs..2.cc
};

#include "findid1.f"
#include "findkey1.f"
#include "findre1.f"
#include "setcasing.f"
#include "setcomment.f"

#include "obs.f"

} // FBB        
#endif


