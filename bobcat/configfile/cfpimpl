//    Lines are stored with initial WS removed.
//    If a line ends in \, then the next line (initial WS removed)
//    is appended to the current line.
//    Information at and beyond the first # on individual lines is removed
//    if the rmComment flag is set to true (\# is converted to a #-character)
//    Then, lines containing only blanks and tabs are not stored

class CF_Pimpl: public CF_Types
{
    uint16_t d_rawNumber;        
    LineVect d_line; 

    bool d_rmComment;
    bool d_caseSensitive;

    ConstIterVect d_CIvect;       // d_vsIter;

    mutable Pattern d_pattern;

    public:
//        typedef //ConstIter const_iterator;

        explicit CF_Pimpl(Comment cType = KeepComment,           // 1
                   Casing sType = UseCase);

                                                // Name of the config file
        explicit CF_Pimpl(std::string const &fname,              // 2
                    Comment cType = KeepComment, 
                    Casing sType = UseCase);

        void setCasing(Casing type);                                    // .f
        void setComment(Comment type);                                  // .f

        void open(std::string const &fname);

        const_iterator begin() const;                                   // .f
        const_iterator end() const;                                     // .f

        const_iterator find(std::string const &target,                  // 2
                            const_iterator const &from) const;

        const_iterator findID(std::string const &id,                   // 2.cc
                              const_iterator const &from) const;

        const_iterator findKey(std::string const &key,                 // 2.cc
                              const_iterator const &from) const;

        const_iterator findRE(std::string const &re,                   // 2.cc
                              const_iterator const &from) const;

        RE_iteratorPair beginEndRE(std::string const &re);             // 2.cc

        std::string const &operator[](size_t idx) const;               // 2.f

        size_t size() const;                                           // 2.f


            // used by obsoleted ConfigFile::beginEndRE()
        RE_iterator endRE() const;                                 // obs.f

    private:
        bool nextLine(std::istream &inStream, std::string &dest);
        bool rmCommentAndEscapes(std::string &line);

        const_iterator findRE(const_iterator const &from) const;       // 3.cc

        static void trimLeft(std::string &line);
        static void trimRight(std::string &line, bool appendNext);
        static bool idChar(int ch);                                    // .f
        static bool caseSensitive(std::string const &haystack,         // .f
                                  std::string const &needle);

                            // needle is guaranteed lowercase
        static bool caseInsensitive(std::string const &haystack,       // .f
                                  std::string const &needle);
};

#include "begin.f"
#include "end.f"
#include "idchar.f"
#include "opindex2.f"
#include "casesensitive.f"
#include "caseinsensitive.f"
#include "size2.f"



