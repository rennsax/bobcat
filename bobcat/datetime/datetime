#ifndef INCLUDED_BOBCAT_DATETIME_
#define INCLUDED_BOBCAT_DATETIME_

#include <ctime>
#include <iosfwd>
#include <unordered_map>
#include <mutex>

namespace FBB
{

    // DateTime objects define d_time as the time since the epoch
    // in seconds, and d_zone as the time zone shift in seconds. 
    //
    // The time to display equals d_time + d_zone.

class DateTime
{
    typedef struct tm TM;
    struct Parse;
    struct ZoneData;

#include "friends.f"

    public:
#include "enums.f"

    private:
        TimeType    d_type; // current type of info in d_tm member
                            // (LOCALTIME (implied when using displayZone) 
                            // or UTC)
    
        time_t      d_time;             // UTC time in seconds
        time_t      d_zone;             // correction from UTC, (seconds)
                                        // except for DST shifts
        int         d_dst;              // DST shift (seconds)

        mutable TM  d_tm;                       // scratch TM, assign when 
                                                // used.
        bool        d_ok = true;
        size_t      d_errno = 0;

        static char const *s_month[];
        static char const *s_day[];
                                                // zone names and their
                                                // zone shifts
        static std::unordered_map<std::string, int>   s_zone;

        static std::mutex s_mutex;
        static std::unordered_map<DateTime const *, ZoneData> s_pimpl;

    public:
        explicit DateTime(TimeType type = UTC); // 1. time displayed as 
                                                //    TimeType

        DateTime(DateTime const &other);        // 2.

        // shifts in minutes
        explicit DateTime(int tzShift);         // 4. LOCALTIME: 
                                                //    UTC + tzShift

                                                // 5. specify UTC/LOCAL time in 
        DateTime(time_t time, TimeType type);   //    seconds


                                                // 6. LOCALTIME: time (UTC) +
        DateTime(time_t time, int tzShift);     //      tzShift (= TZ + DST)

        // with TM tm constructor arguments dst, day of the year,
        //  day of the week are ignored:

                                                // 7. specify tm fields as
                                                //    either UTC or LOCALTIME
                                                //    using the default 
                                                //    tzShift
        explicit DateTime(TM const &tm, TimeType type = UTC);

                                                // 8. specify UTC tm fields
                                                // display + tzShift
        DateTime(TM const &tm, int tzShift);

                                                // 9. specify UTC/LOCAL text 
                                                //    time
        explicit DateTime(std::string const &timeStr, TimeType type = UTC);

                                                //10. specify UTC text time
                                                //    display + 
                                                //      displayZone
        DateTime(std::string const &timeStr, int tzShift);


        DateTime(TimeType type, std::istream &in);  // 11.
        DateTime(TimeType type, std::istream &&in); // 12.f


                                                // Do not use:
        DateTime(std::string const &timeStr, TimeType type, int);   // dep9
        DateTime(std::string const &timeStr, int displayZone, int); // dep10

        ~DateTime();

        DateTime &operator=(DateTime const &other);         // 1
        DateTime &operator=(DateTime &&tmp);                // 2

        void swap(DateTime &other);

        std::string rfc2822() const;
        std::string rfc3339() const;

TriVal dst() const;                                         // .f

        static int zoneShift(std::string const &zoneName);  // minutes, throws
                                                            // if not found
#include "publics"

    private:
        void iniZoneDst();                                  // 1
        void iniZoneDst(int tzShift);                       // 2

        Parse parseTime(std::string const &timeStr);
        Parse parseStream(std::istream &in);
        Parse parseFromYear(std::istream &in);  // "2018-12-03 13:29:11+01:00"
        Parse parseFromDayName(std::istream &in);
        Parse parseDateR(std::istream &in);
        Parse parseFromMonth(std::istream &in);

        void zoneOut(int tzShift);

        int utc2utc();                          // d_tm utc -> utc, ret: DST
        void utc2local();
        void utc2zone(int tzShift);             // d_tm utc -> zone shift

        int local2utc();
        void local2local();                     // d_tm local -> local

        void zone2utc(int tzShift);             // d_tm zone -> utc
        void zone2local(int tzShift);           // d_tm zone -> local 
        void zone2zone(int tzIn, int tzOut);    // d_tm zone1 -> zone2 shift

int dstFromIsdst();                     // .f (.ih)
        int setDst(time_t time);

        TM const *setTM() const;                // return &d_tm set at the
                                                // current time

                                                // inserts d_tm's time values
        std::ostream &timeStr(std::ostream &out) const;

        bool setTmMonth(std::string const &month);  // .f (.ih)


        void setZoneData(ZoneData const &zoneData);

        static int zone();                      // shift-seconds for    1.cc
                                                // the computer's time zone

        static std::string zone(int tzShift);   // "hh:mm" for tzShift  2.cc
                                                // in minutes

                                                // for debug purposes only
        static void tm2cout(char const *label, TM const &ts);


//static time_t utcTimeFromLocal(TM *tm);     // isdst: local's DST

        static int asSeconds(int minutes);      // .f (.ih)
                                                // shifts multiples of 30'
                                                // at most +/-12 hours away
        static Parse timeException();
};

struct DateTime::Parse
{
    bool zone = false;    // true with all timespecs specifying a zone shift
    int  tzShift;         // if zone, then the tzShift in minutes
    
    Parse() = default;
    Parse(int minutes);                     // datetimeparse1.cc
    Parse(char sign, int minutes);          //              2.cc
};

struct DateTime::ZoneData
{
    int d_tzSec;
    int d_dstSec;
    uint8_t d_startDay = 0;       // 0: tm_isdst is used
    uint8_t d_startMon;
    uint8_t d_endDay;
    uint8_t d_endMon;

    ZoneData() = default;
    ZoneData(int tzSec, int dstSec);        // zonedata1.f  (.ih)
};

#include "dst.f"

#include "inlines"

}   // FBB

#endif
