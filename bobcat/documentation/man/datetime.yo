includefile(include/header)

COMMENT(manpage, section, releasedate, archive, short name)
manpage(FBB::DateTime)(3bobcat)(_CurYrs_)(libbobcat-dev__CurVers_-x.tar.gz)
                    (Date and Time)

manpagename(FBB::DateTime)(Performs Date and Time Computations)

manpagesynopsis()
    bf(#include <bobcat/datetime>)nl()
    Linking option: tt(-lbobcat) 

manpagedescription()

    bf(FBB::DateTime) is used to manipulate date and time values. Individual
time fields can be requested or modified, returning `sanitized' times (e.g., a
date like March 33 or a time like 56 hours will never be returned; instead the
next month or day is returned). Times may be specified in local time, in
em(Universal Time Coordinated) (tt(UTC)) values, or as a time in a time zone
differing a fixed number of (half) hours from UTC, which time zones may or may
not support Daylight Saving Time (DST) date-intervals.

Dates/times represented by tt(DateTime) objects may be modified by adding,
subtracting, or setting seconds (and by implication: minutes, hours, and
days), (fields of) tt(struct tm) values, or tt(std::chrono::duration)
values. 

These operations are always performed relative to the tt(DateTime) object's
current timezone (which may be tt(UTC), local or another
timezone). Conversions between time zones (including the tt(UTC) `time zone')
are supported.

tt(DateTime) offers quite a few ways for initializing objects. Times may be
specified as UTC time, as local time, or other offsets from UTC may be
specified. Explicit time offsets are specified as tt(int) values (representing
time offsets in minutes). Negative time offsets specify timezones West of
Greenwich, and positive offsets specify time zones East of Greenwich. Timezone
offsets are truncated to multiples of 30 minutes and are always computed
modulo 12 * 60, as timezones may at most differ 12 hours from UTC.

When constructing tt(DateTime) objects time in seconds since the beginning of
the `epoch' (midnight Jan 1, 1970 UTC); tt(std::tm) structs;
tt(std::chrono::time_points); or several textual time representations may be
used to define the object's date/time. Except for UTC-times DST time shifts
for any specified date-interval may be defined. When DST is active, its time
shift is automatically applied to the represented time. E.g., when a
tt(DateTime) object's time equals 12:00 hr., and DST becomes active tomorrow
using a standard +1 hour shift, then the object's time will show 13:00
hr. after adding 24 hours to its time.

Handling time is complex. The bf(C) function bf(time)(2) returns the time in
seconds since the beginning of the epoch. The function bf(gmtime)(3), when
provided with tt(time's) output returns the broken down time in a tt(struct
tm). When this tt(struct tm) is thereupon passed to
the bf(mktime)(3) function the latter function does em(not) return the
UTC-time in seconds, but a time that differs from the time in UTC by the
current local time shift. E.g., the program
        verbinclude(../../datetime/driver/demos/iu_localtime.cc)
    displays the current em(UTC) clock's hour setting, but reports the
difference in seconds between the local time and the UTC time (e.g., the
difference between CET and UTC is one hour, and the program displays 3600).

To retrieve the time in UTC-seconds from tt(mktime)(3) the function
bf(localtime)(3) must be used to obtain the tt(struct tm) values:
        verbinclude(../../datetime/driver/demos/iu_utc.cc)
    The above program displays the local clock's hour value, while the time
value returned by tt(mktime) equals the value returned by the function
tt(time).

The class tt(DateTime) assumes that the function tt(time) returns the UTC time
in seconds since the beginning of the epoch.

includefile(include/namespace)

manpagesection(INHERITS FROM)    
    -

manpagesection(ENUMS defined by the class DateTime)

     bf(DateTime::Month)nl()
    This enumeration has the following values which are ordered using the
default bf(C++) tt(enum) values:
    itemization(
    it() bf(JANUARY),
    it() bf(FEBRUARY),
    it() bf(MARCH),
    it() bf(APRIL),
    it() bf(MAY),
    it() bf(JUNE),
    it() bf(JULY),
    it() bf(AUGUST),
    it() bf(SEPTEMBER),
    it() bf(OCTOBER),
    it() bf(NOVEMBER),
    it() bf(DECEMBER).
    )

    The standard 3-letter abbreviations can also be used (e.g.,
    tt(DateTime::Jul)):
    itemization(
    it() bf(Jan),
    it() bf(Feb),
    it() bf(Mar),
    it() bf(Apr),
    it() bf(May ),
    it() bf(Jun),
    it() bf(Jul),
    it() bf(Aug),
    it() bf(Sep),
    it() bf(Oct),
    it() bf(Nov),
    it() bf(Dec).
    )


    bf(DateTime::Relative)nl()
    This enumeration is used with the tt(setMonth()) member (see below).
    It has the following values:
    itemization(
    it() bf(THIS_WEEK),
    it() bf(THIS_YEAR),
    it() bf(LAST),
    it() bf(NEXT)
    )

    bf(DateTime::TimeFields)nl()
    This enumeration has the following values which can be tt(bit_or)-ed
    when calling the member tt(setFields()):
    itemization(
    it() bf(SECONDS)
    it() bf(MINUTES)
    it() bf(HOURS)
    it() bf(MONTHDAY)
    it() bf(MONTH)
    it() bf(YEAR)
    )

    bf(DateTime::TimeType)nl()
    This enumeration has the following values:
    itemization(
    it() bf(LOCALTIME): the time is broken down  as the local time,
    it() bf(UTC): the time is broken down as Universal Time Coordinated.
    )

    bf(DateTime::TriVal)nl()
    This enumeration has the following values, returned by the bf(dst())
    member (see below): 
    itemization(
    it() bf(UNKNOWN), returned when no information about the Daylight
        Saving Time is available (starting with Bobcat 4.09.00 this value not
        used anymore);
    it() bf(NO), returned when Daylight Saving Time is not active;
    it() bf(YES), returned when Daylight Saving Time is active.
    )

    bf(DateTime::Weekday)nl()
    This enumeration has the following values which are ordered using the
default bf(C++) tt(enum) values:

    itemization(
    it() bf(SUNDAY),
    it() bf(MONDAY),
    it() bf(TUESDAY),
    it() bf(WEDNESDAY),
    it() bf(THURSDAY),
    it() bf(FRIDAY),
    it() bf(SATURDAY).
    )

    The standard 3-letter abbreviations can also be used (e.g.,
    tt(DateTime::Wed)):
    itemization(
    it() bf(Sun),
    it() bf(Mon),
    it() bf(Tue),
    it() bf(Wed),
    it() bf(Thu),
    it() bf(Fri),
    it() bf(Sat).
    )

manpagesection(STANDARD TEXTUAL TIME REPRESENTATIONS)

    tt(DateTime) objects may also be defined from textual
time-representations. In addition, the date/time represented by a tt(DateTime)
object may be altered using textual time representations extracted from
tt(istreams).

    The following time formats are recognized:
    itemization(
    itt(Mon Dec 3 13:29:11 2018), as displayed by tt(put_time(..., "%c"));

    itt(Mon Dec 3 13:29:11 CET 2018), as displayed by the bf(date)(1) program;

    itt(Mon, 03 Dec 2018 13:29:11 +0100), as displayed by the tt(date -R)
        command (and the tt(rfc2822()) member, see below);

    itt(2018-12-03 13:29:11+01:00), as displayed by the tt(date
        --rfc-3339=seconds) command.
    )

When using standard textual time representations and requesting
tt(DateTime::LOCALTIME) timezone shift specifications (+0100, +01:00) are used
to determine UTC time, followed by a correction for the actual local time
using the computer's current timezone setting. E.g., if the computer's local
time zone equals +1 hour, then specifying tt(2018-12-03 13:29:11+04:00)
and requesting tt(LOCALTIME) results in 13 - 4 + 1 = 10 hr local time.

manpagesection(TIME ZONES AND DAYLIGHT SAVING TIMES)    

Time zones and Daylight Saving Time (DST) may be configured in many ways. Here
is an overview:
    itemization(
    it() When requesting UTC DST is not used, and no zone shift is applied. 
    it() When requesting LOCALTIME the computer's time configuration
        defines how DST is used. It defines the DST begin- and end-dates and a
        standard DST shift of +1 hour is used. Also, the computer's idea of
        its local time zone is used.
    )

For specific time zone shifts DST may be configured by passing 
tt(DateTime::DSTSpec) objects to tt(DateTime) constructors. tt(DSTSpec)
objects can be defined using the following constructors:
    itemization(
    itb(DSTSpec(bool useDST, dstMinutes = 60))
       When tt(useDST) is tt(false) no DST is used, and tt(dstMinutes) is
        ignored. When tt(useDST) is tt(true) the computer's DST date-interval
        is used. By default using the standard 1 hour DST time shift. Other
        (positive or negative) DST shifst (in minutes) can be specified as
        optional 2nd argument;

    itb(DSTSpec(int dstMinutes))
       The argument is used to specify (positive or negative) DST shifst (in
        minutes), which is applied during the computer's DST date-interval;

    itb(DSTSpec(std::string const &begin, 
                std::string const &end, int dstMinutes = 60))
       Here the begin- and end-dates of the DST are specified. tt(Begin) and
        tt(end) are tt(std::string) parameters to avoid numbers starting with
        0 from being interpreted as octal values. They should be specified as
        tt("mmdd") where tt(mm) represents the month number (tt("01")
        representing January, tt("12") representing December) and tt(dd) the
        day number within the specified month. The DST is applied throughout
        the date-interval, so including the tt(end) date specification.
        Within the DST date-interval the standard 1 hour DST time shift is
        applied. Other (positive or negative) DST shifst (in minutes) can be
        specified as optional 3nd argument.
    )

Time zone names may be encountered in standard textual time
representations. The characteristics of time zone names must have been defined
before they can be used. Time zone names and their characteristics may defined
on file which is read by the static member function tt(DateTime::readZones),
or the static member tt(DateTime::addZone) can be used to add individual time
zone specifications to the set of available named time zones (see section
bf(STATIC MEMBERS) below for their descriptions).


manpagesection(CONSTRUCTORS)

If a tt(DateTime) construction fails an tt(FBB::Exception) is thrown.

    itemization(
    itb(DateTime(TimeType type = UTC))
       The object's date/time is initialized to the current date and time.
        The argument specifies how the time is stored and displayed by the
        tt(DateTime) object. By default as UTC time (no zone-shift or dst
        correction) or as local time (tt(LOCALTIME)), using
        the computer's current timezone shift and DST correction;

    itb(DateTime(int zoneMinutes))
       The object's date/time is initialized to a local time at UTC +
        zoneMinutes (in minutes). DST is not used;

    itb(DateTime(int zoneMinutes, DSTSpec const &dstSpec))
       The object's date/time is initialized as in the previous constructor.
        Then the tt(dstSpec) object defines how DST is handled;

    itb(DateTime(time_t time, TimeType type))
       The object's date/time is initialized to tt(time) seconds
        since the beginning of the epoch. When tt(LOCALTIME) is specified the
        computer's current time zone and DST handling correction is applied as
        well;

    itb(DateTime(time_t time, int zoneMinutes))
       The object's date/time is initialized to a local time of tt(time)
        seconds since the beginning of the epoch to which a zone shift of
        tt(zoneMinutes) is added. DST is not used;

    itb(DateTime(time_t time, int zoneMinutes, DSTSpec const &dstSpec))
       The object's date/time is initialized as in the previous constructor.
        Then the tt(dstSpec) object defines how DST is handled;
    )

    The following constructors expect const-references to tt(struct tm)
data. The DST, day of the year, and day of the week fields of tt(struct
tm) data are ignored by the constructors. The bf(struct tm) is defined as:
        verb(
struct tm 
{
    int tm_sec;     // seconds          0..59, or 60: leap second
    int tm_min;     // minutes          0..59
    int tm_hour;    // hours            0..23
    int tm_mday;    // day of the month 1..31
    int tm_mon;     // month            0..11
    int tm_year;    // year             since 1900
    int tm_wday;    // day of the week  0..6
    int tm_yday;    // day in the year  0..365
    int tm_isdst;   // daylight saving time
                    // > 0: yes, 0: no, < 0: unknown
};
        )
 Values outside of these ranges may be used to compute points in time in
the future or in the past. E.g., specifying 30 hours results in 06 hours
the next day. 

    itemization(
    itb(DateTime(tm const &ts, TimeType type = UTC))
       The object's date/time is initialized to either UTC or LOCALTIME using
        tt(ts's) fields, representing the broken down time in
        either UTC (tt(type == UTC)) or local time (tt(type == LOCALTIME)). 

    itb(DateTime(tm const &ts, int zoneMinutes))
       The object's date/time is initialized to a local time using tt(ts's)
        fields, representing a UTC time point, to which a time shift of
        tt(zoneMinutes) minutes is added. DST is not used;

    itb(DateTime(tm const &ts, int zoneMinutes, DSTSpec const &dstSpec))
       The object's date/time is initialized as in the previous constructor.
        Then the tt(dstSpec) object defines how DST is handled;
    )

The following constructors convert textual time representations (cf.  section
bf(STANDARD TEXTUAL TIME REPRESENTATIONS)). These constructors do not
interpret weekday names that may be specified by textual time representations.

Names of time zones used by time specifications (cf. the second standard
textual time representation) must have been defined by the static members
tt(readZones) or tt(addZone) (cf. section bf(STATIC MEMBERS)) or an exception
is thrown.

    itemization(
    itb(DateTime(std::string const &timeStr, TimeType type = UTC))
       The object's date/time is initialized to either UTC or LOCALTIME using
        tt(timeStr's) standard textual time representation. Time
        representations without explicit time zone shifts (cf. the first
        standard textual time representation) are interpreted as UTC times
        (tt(type == UTC)) or as local times (tt(type == LOCALTIME)).

    itb(DateTime(std::string const &timeStr, int zoneMinutes))
       The object's date/time is initialized to a local time based on the
        standard time representation encountered in tt(timeStr).  Time
        representations without explicit time zone shifts (cf. the first
        standard textual time representation) are interpreted as UTC
        times. Other time representations use their time zone shift
        information to determine their equivalent UTC time. Once the UTC time
        is available a time shift of tt(zoneMinutes) minutes is added to
        determine the object's local time. DST is not used;

    itb(DateTime(std::string const &timeStr, int zoneMinutes))
       The object's date/time is initialized as in the previous constructor.
        Then the tt(dstSpec) object defines how DST is handled;
    )

tt(DateTime) objects may alse be initialized using information extracted from
tt(istreams). The information extracted from those streams must be formatted
as standard textual time representations. In addition to the constructors
expecting lvalue references to tt(std::istream) objects constructors expecting
rvalue references to tt(std::istream) objects are also available.

    itemization(
    itb(DateTime(std::istream &in, TimeType type = UTC))
       The object's date/time is initialized to either UTC or LOCALTIME using
        standard textual time representations extracted from tt(in). Time
        representations without explicit time zone shifts (cf. the first
        standard textual time representation) are interpreted as UTC times
        (tt(type == UTC)) or as local times (tt(type == LOCALTIME)).

    itb(DateTime(std::istream &in, int zoneMinutes))
       The object's date/time is initialized to a local time based using
        standard time representations extracted from tt(in).  Time
        representations without explicit time zone shifts (cf. the first
        standard textual time representation) are interpreted as UTC
        times. Other time representations use their time zone shift
        information to determine their equivalent UTC times. Once the UTC time
        is available a time shift of tt(zoneMinutes) minutes is added to
        determine the object's local time. DST is not used;

    itb(DateTime(std::istream &in, int zoneMinutes))
       The object's date/time is initialized as in the previous constructor.
        Then the tt(dstSpec) object defines how DST is handled;
    )

Copy and move constructors are available.

manpagesection(OVERLOADED OPERATORS)

All class-less overloaded operators are defined in the tt(FBB) namespace.  All
overloaded operators modifying tt(DateTime) objects support `commit or
roll-back': if the operation cannot be performed an exception is thrown,
without modifying the destination object.

    itemization(
    itb(std::ostream &std::operator<<(std::ostream &str, FBB::DateTime const
        &dt)) 
       Inserts the first standard textual representation (e.g., tt(Mon Dec 3
        13:29:11 2018)) of the date/time represented by tt(dt) into tt(str).

    itb(std::istream &std::operator>>(std::istream &str, FBB::DateTime &dt))
        Assigns a new date/time to tt(dt) by extracting a standard textual
        time representation from tt(str).

    itb(DateTime const operator+(DateTime const &obj, time_t seconds))
       Returns a copy of tt(obj) to which tt(seconds) have been added.

    itb(DateTime const operator+(DateTime const &obj, tm const &ts))
       Returns a copy of tt(obj) representing a date/time equal to tt(obj's)
        time plus the tt(tm_sec, tm_min, tm_hour, tm_mday, tm_mon) and
        tt(tm_year) fields of tt(ts).

    itb(DateTime const operator+(DateTime const &obj, 
                                 DurationType const &duration)}
       Returns a copy of tt(obj) representing a date/time equal to tt(obj's)
        time plus the number of seconds implied by the tt(duration) object
        have been added. This function was implemented as a function
        template. The tt(DurationType) should be tt(std::chrono::hours,
        std::chrono::minutes) or tt(std::chrono::seconds). Durations smaller
        than seconds are ignored.

    itb(DateTime &operator+=(time_t seconds))
       Adds the number of seconds to the current object.

    itb(DateTime &operator+=(tm const &ts))
        Adds the tt(tm_sec, tm_min, tm_hour, tm_mday, tm_mon) and tt(tm_year)
        fields of tt(ts) to the current object.

    itb(DateTime &operator+=(DurationType const &duration)) 
       Adds the number of seconds implied by the tt(duration) object to the
        current object. This function was implemented as a function
        template. The tt(DurationType) should be tt(std::chrono::hours,
        std::chrono::minutes) or tt(std::chrono::seconds). Durations smaller
        than seconds are ignored.

    itb(DateTime const operator-(DateTime const &obj, time_t seconds))
       Returns a copy of tt(obj) from which tt(seconds) were subtracted.

    itb(DateTime const operator-(DateTime const &obj, tm const &ts))
       Returns a copy of tt(obj) representing a date/time equal to tt(obj's)
        time minus the tt(tm_sec, tm_min, tm_hour, tm_mday, tm_mon) and
        tt(tm_year) fields of tt(ts).

    itb(DateTime const operator-(DateTime const &obj, 
                                 DurationType const &duration)}
       Returns a copy of tt(obj) representing a date/time equal to tt(obj's)
        time minus the number of seconds implied by the tt(duration) object
        have been added. This function was implemented as a function
        template. The tt(DurationType) should be tt(std::chrono::hours,
        std::chrono::minutes) or tt(std::chrono::seconds). Durations smaller
        than seconds are ignored.

    itb(DateTime &operator-=(time_t seconds))
       Subtracts the number of seconds from the current object.

    itb(DateTime &operator-=(tm const &ts)) 
       Subtracts the tt(tm_sec, tm_min, tm_hour, tm_mday, tm_mon) and
        tt(tm_year) fields of tt(ts) from the current object.
        E.g., the following program fragment displays midnight,
        December 31, 1969: 
            verbinsert(//info ../../datetime/driver/demos/era.cc)

    itb(DateTime &operator-=(DurationType const &duration)) 
       Subtracts the number of seconds implied by the tt(duration) object from
        the current object. This function was implemented as a function
        template. The tt(DurationType) should be tt(std::chrono::hours,
        std::chrono::minutes) or tt(std::chrono::seconds). Durations smaller
        than seconds are ignored.

    itb(bool operator==(DateTime const &left, DateTime const &right))
       Returns tt(true) if tt(left) represents the same UTC time as tt(right).

    itb(bool operator!=(DateTime const &left, DateTime const &right))
       Returns tt(true) if tt(left) represents a different UTC time as
        tt(right).

    itb(bool operator<(DateTime const &left, DateTime const &right))
       Returns tt(true) if tt(left) represents an earlier UTC time as
        tt(right).

    itb(bool operator<=(DateTime const &left, DateTime const &right))
       Returns tt(true) if tt(left) represents an earlier or equal UTC time as
        tt(right).

    itb(bool operator>(DateTime const &left, DateTime const &right))
       Returns tt(true) if tt(left) represents a later UTC time as
        tt(right).

    itb(bool operator>=(DateTime const &left, DateTime const &right))
       Returns tt(true) if tt(left) represents a later or equal UTC time as
        tt(right).
    )

Copy and move assignment operators are available.

manpagesection(MEMBER FUNCTIONS)

All members returning a time-element do so according to the latest
time-representation (i.e., tt(UTC), tt(LOCALTIME), or using an explicitly set
display zone shift value). All members returning numeric values use 0 as
their smallest return value, except for the bf(...Nr()) members, which start
at 1.
    itemization(
    itb(DayTime::TriVal dst() const)
       Returns tt(YES) if the current object's time includes a DST shift,
        otherwise tt(NO) is returned. The value tt(UNKNOWN) is not used
        anymore;

    itb(size_t hours() const)
       Returns the number of hours represented by the current object's time
        (0-23);

    itb(DateTime localTime() const)
       Returns a copy of the current object representing its local
        time. If the current object represents UTC time then a tt(DateTime)
        object representing the local time using the computer's default time
        zone is returned;

    itb(size_t minutes() const)
       Returns the number of minutes represented by the current object (0-59);

    itb(DateTime::Month month() const)
       Returns the tt(Month) represented by the current object;

    itb(size_t monthDayNr() const)
       Returns the day number of the month represented by the current
        object's date (1-31);

    itb(string rfc2822() const)
       Returns the current object's date/time displayed according to the
        format specified in RFC 2822. This format is used, e.g., by the
        tt(date -R) command (cf. bf(date)(1)). For example:
       verb(
        Mon,  3 Dec 2018 13:49:10 +0100
       )

    itb(string rfc3339() const)
       Returns the current object's date/time displayed according to the the
        format specified in RFC 3339. This format is used, e.g., by the
        tt(date --rfc-3339=seconds) command (cf. bf(date)(1)). For example:
       verb(
        2018-12-03 13:29:11+01:00
       )

    itb(size_t seconds() const)
       Returns the number of seconds represented by the current object's time
        (0-59, but 60 and 61 may occur due to possible leap seconds);

    itb(bool setDay(int dayNr))
       Assigns tt(dayNr) to the day number of the object's current
        month. Since day numbers start at 1, passing 0 or negative values to
        tt(setDay) results in resetting the objects date to an earlier month.
       For backward compatibility reasons tt(true) is returned;

    itb(bool setFields(tm const &ts, DateTime::TimeFields fields))
       Assigns the fields of tt(ts) specified by a tt(bit_or) combination of
        tt(TimeFields) values in tt(fields) to the corresponding current
        object's date/time tt(tm) fields.
       For backward compatibility reasons tt(true) is returned;

    itb(bool setHours(int hours))
       Assigns tt(hours) to the number of hours of the current object's
        time. 
       For backward compatibility reasons tt(true) is returned;

    itb(bool setMinutes(int minutes))
       Assigns tt(minutes) to the number of minutes of the current object's
        time. 
       For backward compatibility reasons tt(true) is returned;

    itb(bool setMonth(int month)) 
       Assigns tt(month) to the current object's month. January is
        represented by 0, December by 11. Smaller or larger values refer to
        previous or future years. 
       For backward compatibility reasons tt(true) is returned;

    itb(bool setMonth(DateTime::Month month)) 
       Assigns tt(month) to the current object's month.
       For backward compatibility reasons tt(true) is returned;

    itb(bool setMonth(DateTime::Month month, DateTime::Relative where =
            THIS_YEAR)) 
       Assigns tt(month) to the current object's month. By default the month
        of the current year is updated (tt(where == THIS_YEAR)). Use
        tt(LAST) to ensure that the month is set before the current
        object's month (e.g., if the current month is tt(JUNE), then
        requesting tt(AUGUST, LAST) will decrement the object's year, but
        requesting tt(MAY, LAST) won't). Analogously, when specifying
        tt(DateTime::NEXT) the resulting month is set after the current
        object's month.
       For backward compatibility reasons tt(true) is returned;

       Caveat: If the day number of the current month exceeds the number of
        days in the requested month, the object's month and day number will be
        updated to the next month. E.g., if the current day number equals 31,
        and tt(NOVEMBER) is requested, then the object's date is updated to
        December 1.

    itb(bool setSeconds(int seconds))
       Assigns tt(seconds) to the number of seconds of the current object's
        time. 
       For backward compatibility reasons tt(true) is returned;

    itb(bool setTime(time_t time))
       Assigns tt(time) as the number of seconds since the epoch 
        to the current object's UTC time.
       For backward compatibility reasons tt(true) is returned;

    itb(bool setWeekday(Weekday day, Relative where = NEXT))
       Assigns tt(day) to the current object's day of the week. By default
        (tt(where == NEXT)) the day will be in the future (maybe the current
        week, maybe in the next week: if the current day equals Monday and
        Friday is specified, the current week is used. If the current day
        equals Friday and Monday is requested the next week is used). By
        specifying tt(LAST) for tt(where) the day will be in the past
        (likewise, if the current day equals Friday and Monday is requested,
        the current week is used). By specifying tt(where = THIS_WEEK) then
        tt(day) will be in the current week. 
       For backward compatibility reasons tt(true) is returned;

    itb(bool setYear(size_t year))
       Assigns tt(year) to the current object's date. Note that tt(year) is
        the actual calendar year, and not, e.g., the year relative to the
        beginning of the epoch.
       For backward compatibility reasons tt(true) is returned;

    itb(void swap(DateTime &other))
       Swaps the current and other tt(DateTime objects;

    itb(tm const *timeStruct() const)
       Returns a pointer to the object's current tt(tm) representing its
        object's broken down time elements. If the object holds a local time
        the tt(tm) struct represents the local time (if applicable: including
        a DST shift), otherwise it represents UTC;


    itb(DateTime to(DateTime::TimeType type) const)
       Returns a copy of the current object representing its UTC time if
        tt(DateTime::UTC) was specified, If tt(LOCALTIME) is specified and the
        current object's type is tt(LOCALTIME) then a copy of the current
        object is returned. If the current object's type is tt(UTC) then a
        copy of the current object is returned as a tt(LOCALTIME) object,
        using the computer's default time zone;

    itb(DateTime utc() const)
       Returns a copy of the current object representing its UTC time;

    itb(time_t utcSeconds() const)
       Returns the current object's (UTC) time in seconds since the epoch;

    itb(DateTime::Weekday weekday() const)
       Returns the current object's tt(Weekday) value;

    itb(size_t weekNr() const)
       Returns the week number of the current object's date. Week numbers are
        numbers of complete weeks. If Jan 1st is a Sunday then the week
        numbers of Jan 1st through Jan 6th are returned as 1, otherwise the
        week numbers of Jan 1st through the date of the first Saturday of the
        year (which could very well be Jan 1st) are returned as 0;

    itb(size_t year() const)
       Returns the year of the current object's date (note: this is the actual
        calendar year, not the year since the epoch);

       Returns the day in the year of the current object's date. January 1
        is returned as 0;

    itb(size_t yearDayNr() const)
       Returns the day in the year of the current object's date. January 1
        is returned as 1;

    itb(int zoneMinutes() const)
       Returns the current object's time zone shift in minutes relative to
        UTC.
    )

manpagesection(STATIC MEMBERS)

    itemization(
    itb(void addZone(std::string const &name, int zoneMinutes, 
                    DSTSpec const &spec))
       Defines time zone tt(name), shifted tt(zoneMinutes) from UTC, using
        DST specification tt(spec). If a zone by that name already exists 
        its existing definition is replaced by the one provided by
        tt(addZone). The time zone tt(CET) is
        predefined using specification tt(60, DSTSpec{ true });

    itb(int defaultZoneMinutes())
       Returns the computer's idea of its current time zone shift in minutes;

    itb(int minutes(std::string const &zoneName))
       Returns the time zone shift in minutes of time zone tt(zoneName). If no
        such zone has been defined an exception is thrown;

    itb(void readZones(std::string const &fname))
       The file tt(fname) contains time zone names and their
        specifications. Empty lines and lines beginning with tt(#) are
        ignored. Time zone specifications can use the following formats:
            verb(
    # zone NAME: zone shift 60 min. wrt UTC and does not use DST
    NAME: 60 false

    # zone NAME: same zone shift, uses standard DST dates
    NAME: 60 true

    # zone NAME: same as above, DST shift is 30 minutes
    NAME: 60 true 30

    # zone NAME: same zone shift, std DST shift from May 1 thru Sep 30
    NAME: 60 0501 0930

    # zone NAME: same as above, DST shift is 30 minutes backward
    NAME: 60 0501 0930 -30
            )

    itb(void tm2cout(char const *label, TM const &ts))
    itb(std::string zoneTxt(int zoneMinutes))
    )
    )
manpagesection(OBSOLETED)

The following members are available, but do not inspect or modify their
tt(DateTime) objects. They are removed in a future Bobcat release.
    itemization(
    itb(operator bool() const)
       Returns bf(true);

    itb(size_t error() const)
       Returns bf(0);

    itb(void setValid())
       Performs no actions;

    itb(bool setFields(struct tm const &timeStruct, int fields))
        Use tt(setFields(struct tm const &timeStruct, TimeFields fields));

    itb(bool set...)
       The set-members (e.g., tt(setSeconds)) return tt(true) for backward
        compatibility. Starting with Bobcat version 5 these members will
        return tt(void);

    itb(time_t time() const)
       Use tt(utcSeconds());

    itb(bool valid() const)
       Returns bf(true);

    itb(int displayZoneShift() const)
        Use tt(displayZoneMinutes()).
    )

manpagesection(EXAMPLE)
    
    An extensive example illustrating the use of all of tt(DateTime)'s members
is provided in the file tt(bobcat/datetime/driver/driver.cc) found in the
source archive.

manpagefiles()
    em(bobcat/datetime) defines the class interface.

manpageseealso()
        bf(bobcat)(7), bf(Exception)(3bobcat), bf(asctime_r)(3), 
        bf(gmtime_r)(3), bf(localtime_r)(3), bf(time)(2),
        bf(mktime)(3),
        bf(https://www.timeanddate.com/time/dst/events.html)

manpagebugs()
    The class tt(DateTime) assumes that bf(time)(2) returns the time in
    UTC.nl()
    English is used / expected when specifying named date components.

includefile(include/trailer)
